variable = object$glasso
qgraph(variable,
layout = layout,
vsize = vsize,
groups = groups,
...)
}
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
library(EGA)
library(EGA)
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
ega.wmt <- EGA.data.frame(data = wmt2[,7:24], plot.EGA = TRUE)
library(EGA)
ega.wmt <- EGA.data.frame(data = wmt2[,7:24], plot.EGA = TRUE)
library(EGA)
library(EGA)
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
#EGA default function - 03/04/2016
EGA <- function(data, ...) UseMethod('EGA')
EGA.data.frame <- function(data, plot.EGA = TRUE){
require(qgraph)
require(igraph)
data <- as.data.frame(data)
cor.data <- cor_auto(data)
glasso.ebic <- EBICglasso(S = cor.data, n = nrow(data), lambda.min.ratio = 0.1)
graph.glasso <- as.igraph(qgraph(glasso.ebic, layout = "spring", vsize = 3,DoNotPlot = TRUE))
wc <- walktrap.community(graph.glasso)
n.dim <- max(wc$membership)
if (plot.EGA == TRUE) {
plot.ega <- qgraph(glasso.ebic, layout = "spring", vsize = 4, groups = as.factor(wc$membership))
}
a <- list()
a$n.dim <- n.dim
a$correlation <- cor.data
a$glasso <- glasso.ebic
a$wc <- wc$membership
dim.variables <- data.frame(items = names(data), dimension = a$wc)
dim.variables <- dim.variables[order(dim.variables[,2]),]
a$dim.variables <- dim.variables
class(a) <- c("EGA", "list")
return(a)
}
print.EGA <- function(x, ...)
{
cat("EGA Results:\n")
cat("\nNumber of Dimensions:\n")
print(x$n.dim)
cat("\nItems per Dimension:\n")
print(x$dim.variables)
}
plot.EGA <- function(object,
layout = 'spring',
vsize = 4,
...) {
groups = as.factor(object$wc)
variable = object$glasso
qgraph(variable,
layout = layout,
vsize = vsize,
groups = groups,
...)
}
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
ega.wmt
#EGA default function - 03/04/2016
EGA <- function(data, ...) UseMethod('EGA')
EGA.default <- function(data, plot.EGA = TRUE){
require(qgraph)
require(igraph)
data <- as.data.frame(data)
cor.data <- cor_auto(data)
glasso.ebic <- EBICglasso(S = cor.data, n = nrow(data), lambda.min.ratio = 0.1)
graph.glasso <- as.igraph(qgraph(glasso.ebic, layout = "spring", vsize = 3,DoNotPlot = TRUE))
wc <- walktrap.community(graph.glasso)
n.dim <- max(wc$membership)
if (plot.EGA == TRUE) {
plot.ega <- qgraph(glasso.ebic, layout = "spring", vsize = 4, groups = as.factor(wc$membership))
}
a <- list()
a$n.dim <- n.dim
a$correlation <- cor.data
a$glasso <- glasso.ebic
a$wc <- wc$membership
dim.variables <- data.frame(items = names(data), dimension = a$wc)
dim.variables <- dim.variables[order(dim.variables[,2]),]
a$dim.variables <- dim.variables
class(a) <- c("EGA", "list")
return(a)
}
print.EGA <- function(x, ...)
{
cat("EGA Results:\n")
cat("\nNumber of Dimensions:\n")
print(x$n.dim)
cat("\nItems per Dimension:\n")
print(x$dim.variables)
}
plot.EGA <- function(object,
layout = 'spring',
vsize = 4,
...) {
groups = as.factor(object$wc)
variable = object$glasso
qgraph(variable,
layout = layout,
vsize = vsize,
groups = groups,
...)
}
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
ega.wmt
library(EGA)
#EGA default function - 03/04/2016
EGA <- function(data, plot.EGA = TRUE) UseMethod('EGA')
EGA.default <- function(data, plot.EGA = TRUE){
require(qgraph)
require(igraph)
data <- as.data.frame(data)
cor.data <- cor_auto(data)
glasso.ebic <- EBICglasso(S = cor.data, n = nrow(data), lambda.min.ratio = 0.1)
graph.glasso <- as.igraph(qgraph(glasso.ebic, layout = "spring", vsize = 3,DoNotPlot = TRUE))
wc <- walktrap.community(graph.glasso)
n.dim <- max(wc$membership)
if (plot.EGA == TRUE) {
plot.ega <- qgraph(glasso.ebic, layout = "spring", vsize = 4, groups = as.factor(wc$membership))
}
a <- list()
a$n.dim <- n.dim
a$correlation <- cor.data
a$glasso <- glasso.ebic
a$wc <- wc$membership
dim.variables <- data.frame(items = names(data), dimension = a$wc)
dim.variables <- dim.variables[order(dim.variables[,2]),]
a$dim.variables <- dim.variables
class(a) <- c("EGA", "list")
return(a)
}
print.EGA <- function(x, ...)
{
cat("EGA Results:\n")
cat("\nNumber of Dimensions:\n")
print(x$n.dim)
cat("\nItems per Dimension:\n")
print(x$dim.variables)
}
plot.EGA <- function(object,
layout = 'spring',
vsize = 4,
...) {
groups = as.factor(object$wc)
variable = object$glasso
qgraph(variable,
layout = layout,
vsize = vsize,
groups = groups,
...)
}
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
library(EGA)
library(EGA)
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
EGA <- function(data, plot.EGA = TRUE) UseMethod('EGA')
EGA.default <- function(data, plot.EGA = TRUE){
require(qgraph)
require(igraph)
data <- as.data.frame(data)
cor.data <- cor_auto(data)
glasso.ebic <- EBICglasso(S = cor.data, n = nrow(data), lambda.min.ratio = 0.1)
graph.glasso <- as.igraph(qgraph(glasso.ebic, layout = "spring", vsize = 3,DoNotPlot = TRUE))
wc <- walktrap.community(graph.glasso)
n.dim <- max(wc$membership)
if (plot.EGA == TRUE) {
plot.ega <- qgraph(glasso.ebic, layout = "spring", vsize = 4, groups = as.factor(wc$membership))
}
a <- list()
a$n.dim <- n.dim
a$correlation <- cor.data
a$glasso <- glasso.ebic
a$wc <- wc$membership
dim.variables <- data.frame(items = names(data), dimension = a$wc)
dim.variables <- dim.variables[order(dim.variables[,2]),]
a$dim.variables <- dim.variables
class(a) <- c("EGA", "list")
return(a)
}
print.EGA <- function(x, ...)
{
cat("EGA Results:\n")
cat("\nNumber of Dimensions:\n")
print(x$n.dim)
cat("\nItems per Dimension:\n")
print(x$dim.variables)
}
plot.EGA <- function(object,
layout = 'spring',
vsize = 4,
...) {
groups = as.factor(object$wc)
variable = object$glasso
qgraph(variable,
layout = layout,
vsize = vsize,
groups = groups,
...)
}
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
?EGA
ega.wmt
plot(ega.wmt)
library(EGA)
library(EGA)
?EGA
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
ega.wmt
plot(ega.wmt)
EGA <- function(data, plot.EGA = TRUE)  UseMethod("linmod"){
require(qgraph)
require(igraph)
data <- as.data.frame(data)
cor.data <- cor_auto(data)
glasso.ebic <- EBICglasso(S = cor.data, n = nrow(data), lambda.min.ratio = 0.1)
graph.glasso <- as.igraph(qgraph(glasso.ebic, layout = "spring", vsize = 3,DoNotPlot = TRUE))
wc <- walktrap.community(graph.glasso)
n.dim <- max(wc$membership)
if (plot.EGA == TRUE) {
plot.ega <- qgraph(glasso.ebic, layout = "spring", vsize = 4, groups = as.factor(wc$membership))
}
a <- list()
a$n.dim <- n.dim
a$correlation <- cor.data
a$glasso <- glasso.ebic
a$wc <- wc$membership
dim.variables <- data.frame(items = names(data), dimension = a$wc)
dim.variables <- dim.variables[order(dim.variables[,2]),]
a$dim.variables <- dim.variables
class(a) <- c("EGA", "list")
return(a)
}
print.EGA <- function(x, ...)
{
cat("EGA Results:\n")
cat("\nNumber of Dimensions:\n")
print(x$n.dim)
cat("\nItems per Dimension:\n")
print(x$dim.variables)
}
plot.EGA <- function(object,
layout = 'spring',
vsize = 4,
...) {
groups = as.factor(object$wc)
variable = object$glasso
qgraph(variable,
layout = layout,
vsize = vsize,
groups = groups,
...)
}
library(EGA)
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
library(EGA)
library(networkD3)
library(networkD3)
library(networkD3)
library(networkD3)
?networkD3
??networkD3
library(networkD3)
plot3D  <- function(ega.obj, save = FALSE) {
require(networkD3)
require(igraph)
require(qgraph)
graph.glasso <- as.igraph(qgraph(ega.obj$glasso, DoNotPlot = TRUE))
d3 <- igraph_to_networkD3(graph.glasso, group = ega.obj$wc)
# Create force directed network plot
plot.3d <- forceNetwork(Links = d3$links, Nodes = d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group', fontSize = 25, Nodesize =2,
radiusCalculation = JS("Math.sqrt(d.nodesize)+14"),
linkDistance = 250, legend = TRUE, opacity = 0.8, width = 800, height = 500)
if save == TRUE {
plot.3d %>% saveNetwork(file = '3D_EGA_Plot.html')
}
return(plot.3d)
}
plot3D  <- function(ega.obj, save = FALSE) {
require(networkD3)
require(igraph)
require(qgraph)
graph.glasso <- as.igraph(qgraph(ega.obj$glasso, DoNotPlot = TRUE))
d3 <- igraph_to_networkD3(graph.glasso, group = ega.obj$wc)
# Create force directed network plot
plot.3d <- forceNetwork(Links = d3$links, Nodes = d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group', fontSize = 25, Nodesize =2,
radiusCalculation = JS("Math.sqrt(d.nodesize)+14"),
linkDistance = 250, legend = TRUE, opacity = 0.8, width = 800, height = 500)
if save == TRUE {
saveNetwork(plot.3d, file = '3D_EGA_Plot.html')
}
return(plot.3d)
}
plot3D  <- function(ega.obj, save = FALSE) {
require(networkD3)
require(igraph)
require(qgraph)
graph.glasso <- as.igraph(qgraph(ega.obj$glasso, DoNotPlot = TRUE))
d3 <- igraph_to_networkD3(graph.glasso, group = ega.obj$wc)
# Create force directed network plot
plot.3d <- forceNetwork(Links = d3$links, Nodes = d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group', fontSize = 25, Nodesize =2,
radiusCalculation = JS("Math.sqrt(d.nodesize)+14"),
linkDistance = 250, legend = TRUE, opacity = 0.8, width = 800, height = 500)
if (save == TRUE) {
saveNetwork(plot.3d, file = '3D_EGA_Plot.html')
}
return(plot.3d)
}
library(EGA)
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
plot3D(ega.wmt)
d3plot <- plot3D(ega.wmt)
library(EGA)
library(EGA)
library(EGA)
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
d3plot <- plot3D(ega.wmt)
library(EGA)
library(EGA)
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
d3plot <- plot3D(ega.wmt)
library(EGA)
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
d3plot <- plot3D(ega.wmt)
d3plot
#Bootstrap EGA:
bootEGA <- function(data, n, medianStructure = TRUE, plot.MedianStructure = TRUE){
require(qgraph)
require(bootnet)
require(igraph)
boot.ega <- bootnet(data, nBoot = n, default = "EBICglasso", computeCentrality = FALSE)
bootGraphs <- vector("list", n)
for (i in 1:n) {
bootGraphs[[i]] <- boot.ega$boots[[i]]
}
boot.igraph <- vector("list", n)
for (l in 1:n){
boot.igraph[[l]] <-as.igraph(plot(bootGraphs[[l]], DoNotPlot = TRUE))
}
boot.wc <- vector("list", n)
for (m in 1:n){
boot.wc[[m]] <-walktrap.community(boot.igraph[[m]])
}
boot.ndim <- matrix(NA,nrow=i,ncol=2)
for (m in 1:n){
boot.ndim[m,2] <-max(boot.wc[[m]]$membership)
}
colnames(boot.ndim) <- c("Boot.Number", "N.Dim")
boot.ndim[,1] <- seq_len(n)
#Computing the median EBICglasso graph and its dimensionality:
if(medianStructure == TRUE){
mStructure <- list()
for (k in 1:length(boot.ega$boots)) {
mStructure[[k]]  <- boot.ega$boots[[k]][[1]]
median.Structure <- apply(simplify2array(mStructure), 1:2, median)
}
median.igraph <- as.igraph(qgraph(median.Structure, DoNotPlot = TRUE))
median.wc <-walktrap.community(median.igraph)
median.ndim <- max(median.wc$membership)
dim.variables <- data.frame(items = names(data), dimension = median.wc$membership)
}
#Ploting the mean EBICglasso graph:
if (plot.MedianStructure == TRUE) {
plot.median.ega <- qgraph(median.Structure, layout = "spring", vsize = 4, groups = as.factor(median.wc$membership))
}
#Computing the Median, SD, SE and CI of the estimated dimensions
Median <- median(boot.ndim[,2])
sd.boot <- sd(boot.ndim[,2])
se.boot <- (1.253*sd.boot)/sqrt(nrow(boot.ndim))
ciMult <- qt(.95/2 + .5, nrow(boot.ndim)-1)
ci <- se.boot * ciMult
summary.table <- data.frame(n.Boots = n, median.dim = Median, SD.dim = sd.boot, SE.dim = se.boot, CI.dim = ci, Lower = Median-ci, Upper = Median + ci)
#Print results
result <- list()
result$n <- n
result$boot.ndim <- boot.ndim
result$bootGraphs <- bootGraphs
result$summary.table <- summary.table
medianGraph <- list()
medianGraph$graph <- median.Structure
medianGraph$median.dim.variables <- dim.variables[order(dim.variables[,2]),]
result$medianGraph <- medianGraph
return(result)
}
boot.wmt <- bootEGA(data = wmt2[,7:24], n = 20, medianStructure = TRUE, plot.MedianStructure = TRUE)
library(wmt2)
library(EGA)
boot.wmt <- bootEGA(data = wmt2[,7:24], n = 20, medianStructure = TRUE, plot.MedianStructure = TRUE)
boot.wmt$summary.table
library(EGA)
library(devtools)
devtools::use_vignette("Introduction to EGA")
??EGA
library(EGA)
?EGA
?plot3D
library("ggplot2")
library("dplyr")
library("tidyr")
Data <- read.csv("EGAsims.csv")
library(EGA)
library(doParallel)
?CFA
ega.wmt <- EGA(data = wmt2[,7:24])
cfa.wmt <- %dopar% (EGA::CFA(ega.obj = ega.wmt, estimator = "WLSMV", plot.CFA = TRUE, data = wmt2))
ega.wmt[1]
%dopar% (EGA::CFA(ega.obj = ega.wmt, estimator = "WLSMV", plot.CFA = TRUE, data = wmt2))
?"doParallel"
n <- 10
boot.ega <-  foreach(b = 1:n) %dopar% (bootnet::bootnet(data = wmt2[,7:24], nBoot = b, default = "EBICglasso", computeCentrality = FALSE))
registerDoParallel(cores=7)
n <- 10
boot.ega <-  foreach(b = 1:n) %dopar% (bootnet::bootnet(data = wmt2[,7:24], nBoot = b, default = "EBICglasso", computeCentrality = FALSE))
boot.ega <-  foreach(b = 1:n) %dopar% (EGA::bootEGA(data = wmt2[,7:24], n = b, n, medianStructure = TRUE, plot.MedianStructure = TRUE))
boot.ega <-  foreach(b = 1:n) %dopar% (EGA::bootEGA(data = wmt2[,7:24], n = b, medianStructure = TRUE, plot.MedianStructure = TRUE))
load(wmt2)
data(wmt2)
boot.ega <-  foreach(b = 1:n) %dopar% (EGA::bootEGA(data = wmt2[,7:24], n = b, medianStructure = TRUE, plot.MedianStructure = TRUE))
ega.time <- system.time(
foreach(b = 1:n) %dopar% (EGA::bootEGA(data = wmt2[,7:24], n = b, medianStructure = TRUE, plot.MedianStructure = TRUE))
)
ega.regular <- system.time(
bootEGA(data = wmt2[,7:24], n = 10, medianStructure = TRUE, plot.MedianStructure = TRUE)
)
ega.time
ega.regular
n <- 100
ega.time <- system.time(
foreach(b = 1:n) %dopar% (EGA::bootEGA(data = wmt2[,7:24], n = b, medianStructure = TRUE, plot.MedianStructure = TRUE))
)
getwd()
load(WMT)
load("C:/Users/Admin/Dropbox/Pacotes do R/Pacote EGA/EGA/data/wmt2.RData")
load(wmt2)
head(wmt2)
load("C:/Users/Admin/Dropbox/Pacotes do R/Pacote EGA/EGA/data/intelligenceBattery.RData")
head(intelligenceBattery)
table(intelligenceBattery$monthly_come)
load("./data/intelligenceBattery.rda")
str(intelligenceBattery)
summary(intelligenceBattery$age_y)
sd(intelligenceBattery$age_y)
sd(na.omit(intelligenceBattery$age_y))
library(EGA)
library(EGA)
head(wmt2)
head(intelligenceBattery)
?EGA
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
cfa.wmt <- CFA(ega.obj = ega.wmt, estimator = "WLSMV", plot.CFA = TRUE, data = wmt2, layout = "circle")
library(EGA)
library(EGA)
?EGA
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
cfa.wmt <- CFA(ega.obj = ega.wmt, estimator = "WLSMV", plot.CFA = TRUE, data = wmt2, layout = "circle")
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
library(EGA)
cfa.wmt <- CFA(ega.obj = ega.wmt, estimator = "WLSMV", plot.CFA = TRUE, data = wmt2)
cfa.wmt <- CFA(ega.obj = ega.wmt, estimator = "WLSMV", plot.CFA = TRUE, data = wmt2, layout = "tree")
library(EGA)
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
cfa.wmt <- CFA(ega.obj = ega.wmt, estimator = "WLSMV", plot.CFA = TRUE, data = wmt2, layout = "circle")
ega.intel <- EGA(data = intelligenceBattery[,7:66])
names(intelligenceBattery)
ega.intel <- EGA(data = intelligenceBattery[,8:67])
ega.intel <- EGA(data = intelligenceBattery[,9:67])
cfa.intel <- CFA(ega.obj = ega.intel, estimator = "WLSMV", plot.CFA = TRUE, data = intelligenceBattery[,7:66], layout = "circle")
cfa.intel <- CFA(ega.obj = ega.intel, estimator = "WLSMV", plot.CFA = TRUE, data = intelligenceBattery[,8:67], layout = "circle")
ega.wmt <- EGA(data = wmt2[,7:24])
cfa.wmt <- CFA(ega.obj = ega.wmt, estimator = "WLSMV", plot.CFA = TRUE, data = wmt2)
cfa.wmt <- CFA(ega.obj = ega.wmt, estimator = "WLSMV", plot.CFA = TRUE, data = wmt2, layout = "circle")
library(EGA)
?cfa
ega.wmt <- EGA(data = wmt2[,7:24])
cfa.wmt <- CFA(ega.obj = ega.wmt, estimator = "WLSMV", plot.CFA = TRUE, data = wmt2, layout = "circle", verbose = TRUE)
load("./data/intelligenceBattery.rda")
names(intelligenceBattery.rda)
names(intelligenceBattery)
intelligenceBattery <- intelligenceBattery[,-8]
names(intelligenceBattery)
library(devtools)
use_data(intelligenceBattery, overwrite = TRUE)
load("./data/intelligenceBattery.rda")
names(intelligenceBattery)
library(EGA)
ega.wmt <- EGA(data = wmt2[,7:24])
cfa.wmt <- CFA(ega.obj = ega.wmt, estimator = "WLSMV", plot.CFA = TRUE, data = wmt2, layout = "circle")
load("./data/intellingeceBattery.rda")
load("./data/intellingenceBattery.rda")
load("./data/intelligenceBattery.rda")
names(intelligenceBattery)
remove(cfa.wmt)
remove(ega.wmt)
intelligenceBattery <- intelligenceBattery[,-67]
names(intelligenceBattery)
library(devtools)
use_data(intelligenceBattery, overwrite = TRUE)
library(EGA)
?EGA
library(EGA)
library(EGA)
