#     if (any(needAdjust)){
#       # adjust <- which(needAdjust & upper.tri(needAdjust,diag=FALSE),arr.ind=TRUE)
#       sampleDistribution <- sort(sampleGraph[upper.tri(sampleGraph,diag=FALSE)])
#       for (b in seq_along(bootResults)){
#           bootEdges <- bootResults[[b]]$graph[upper.tri(bootResults[[b]]$graph,diag=FALSE)]
#           bootRank <- order(order(bootEdges))
#           bootResults[[b]]$graph[upper.tri(bootResults[[b]]$graph,diag=FALSE)] <- ifelse(needAdjust,sampleDistribution[bootRank],bootEdges)
#           bootResults[[b]]$graph[lower.tri(bootResults[[b]]$graph,diag=FALSE)] <- t(bootResults[[b]]$graph)[lower.tri(bootResults[[b]]$graph,diag=FALSE)]
#       }
#     }
#
#   }
if (edgeResample){
bootGraphs <- do.call(abind::abind,c(lapply(bootResults,'[[','graph'),along=3))
sampleDistribution <- sort(sampleGraph[upper.tri(sampleGraph,diag=FALSE)])
for (b in seq_along(bootResults)){
bootEdges <- bootResults[[b]]$graph[upper.tri(bootResults[[b]]$graph,diag=FALSE)]
bootRank <- order(order(bootEdges))
bootResults[[b]]$graph[upper.tri(bootResults[[b]]$graph,diag=FALSE)] <- sampleDistribution[bootRank]
bootResults[[b]]$graph[lower.tri(bootResults[[b]]$graph,diag=FALSE)] <- t(bootResults[[b]]$graph)[lower.tri(bootResults[[b]]$graph,diag=FALSE)]
}
}
### Compute the full parameter table!!
if (verbose){
message("Computing statistics...")
pb <- txtProgressBar(0,nBoots+1,style = 3)
}
statTableOrig <- statTable(sampleResult,  name = "sample", alpha = alpha, computeCentrality = computeCentrality)
if (verbose){
setTxtProgressBar(pb, 1)
}
statTableBoots <- vector("list", nBoots)
for (b in seq_len(nBoots)){
statTableBoots[[b]] <- statTable(bootResults[[b]], name = paste("boot",b), alpha = alpha, computeCentrality = computeCentrality)
if (verbose){
setTxtProgressBar(pb, b+1)
}
}
if (verbose){
close(pb)
}
# Ordereing by node name to make nice paths:
Result <- list(
sampleTable = ungroup(statTableOrig),
bootTable =  ungroup(dplyr::rbind_all(statTableBoots)),
sample = sampleResult,
boots = bootResults,
type = type,
sampleSize = Np)
class(Result) <- "bootnet"
return(Result)
#   } else {
#
#     ### Nodewise bootstrapping!
#
#     # Bootstrap results:
#     bootResults <- vector("list", nBoots)
#
#     # Original centrality:
#     origCentrality <- centrality(sampleResult$graph)
#
#     # Setup the bootstrap table
#     N <- ncol(data)
#     simResults <- data.frame(id = seq_len(nBoots), nNodes = sample(nNodes,nBoots,TRUE))
#     simResults[c("corStrength","corBetweenness","corCloseness","corSPL")] <- NA
#     Strength <- Closeness <- Betweenness <- matrix(NA, nrow(simResults), N)
#     colnames(Strength) <- colnames(Closeness) <- colnames(Betweenness) <- labels
#
#
#     if (verbose){
#       message("Bootstrapping...")
#       pb <- txtProgressBar(0,nBoots,style = 3)
#     }
#
#
#     for (b in seq_len(nBoots)){
#       nNodes <- simResults$nNodes[b]
#       inSample <- sort(sample(seq_len(N),nNodes))
#       bootData <- data[,inSample, drop=FALSE]
#       res <- estimateNetwork(bootData, prepFun, prepArgs, estFun, estArgs)
#       bootResults[[b]] <- list(
#         graph = do.call(graphFun,c(list(res), graphArgs)),
#         intercepts = do.call(intFun,c(list(res), intArgs)),
#         results = res,
#         labels = labels
#       )
#
#       class(bootResults[[b]]) <- c("bootnetResult", "list")
#
#       if (verbose){
#         setTxtProgressBar(pb, b)
#       }
#     }
#
#     if (verbose){
#       close(pb)
#     }
#
#     browser()
#
#
#       simCentrality <- centrality(bootResults[[b]]$graph)
#       simResults$corStrength[b] <- cor(origCentrality$OutDegree[inSample], simCentrality$OutDegree)
#       simResults$corBetweenness[b] <- cor(origCentrality$Betweenness[inSample], simCentrality$Betweenness)
#       simResults$corCloseness[b] <- cor(origCentrality$Closeness[inSample], simCentrality$Closeness)
#       simResults$corSPL[b] <- cor(origCentrality$ShortestPathLengths[inSample,inSample][upper.tri(origCentrality$ShortestPathLengths[inSample,inSample], diag=FALSE)], simCentrality$ShortestPathLengths[upper.tri(simCentrality$ShortestPathLengths, diag=FALSE)])
#
#       Strength[b,inSample] <- simCentrality$OutDegree
#       Closeness[b,inSample] <- simCentrality$Closeness
#       Betweenness[b, inSample] <- simCentrality$Betweenness
#
#
#
#
#     browser()
#
#   }
}
boot.wmt2 <- bootEGA(data = wmt2[,7:24], n = 5, medianStructure = TRUE, plot.MedianStructure = TRUE)
library(EGA)
boot.wmt2 <- bootEGA(data = wmt2[,7:24], n = 5, medianStructure = TRUE, plot.MedianStructure = TRUE)
library(EGA)
boot.wmt2 <- bootEGA(data = wmt2[,7:24], n = 5, medianStructure = TRUE, plot.MedianStructure = TRUE)
library(DBI)
sessionInfo(DBI)
sessionInfo()
install.packages("DBI")
install.packages("DBI")
library(EGA)
sessionInfo()
boot.wmt2 <- bootEGA(data = wmt2[,7:24], n = 5, medianStructure = TRUE, plot.MedianStructure = TRUE)
library(bootnet)
library(EGA)
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
boot.wmt2 <- bootEGA(data = wmt2[,7:24], n = 5, medianStructure = TRUE, plot.MedianStructure = TRUE)
library(EGA)
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
boot.wmt2 <- bootEGA(data = wmt2[,7:24], n = 5, medianStructure = TRUE, plot.MedianStructure = TRUE)
library(bootnet)
install.packages("bootnet")
library(bootnet)
library(EGA)
sessionInfo()
boot.wmt2 <- bootEGA(data = wmt2[,7:24], n = 5, medianStructure = TRUE, plot.MedianStructure = TRUE)
install.packages("dplyr")
install.packages("dplyr")
library(devtools)
devtools::install_github('hadley/dplyr')
install.packages("RCurl")
library(devtools)
devtools::install_github('hadley/dplyr')
install.packages("Rtools")
install.packages("bindr")
library(dplyr)
install.packages("dplyr")
library(EGA)
library(bootnet)
library(EGA)
boot.wmt2 <- bootEGA(data = wmt2[,7:24], n = 5, medianStructure = TRUE, plot.MedianStructure = TRUE)
install.packages("bootnet")
install.packages("bootnet")
library(EGA)
boot.wmt2 <- bootEGA(data = wmt2[,7:24], n = 5, medianStructure = TRUE, plot.MedianStructure = TRUE)
Network <- estimateNetwork(wmt2[,7:24], default = "EBICglasso")
boot1 <- bootnet(wmt2[,7:24], nBoots = 5, default = "EBICglasso")
load("D:/Dropbox/Dropbox/Pacotes do R/Pacote EGA/EGA/.RData")
load("D:/Dropbox/Dropbox/Pacotes do R/Pacote EGA/EGA/R/bootEGA.R")
library(EGA)
library(bootnet)
cancer <- read.csv2("D:/Dropbox/Dropbox/Seleções Internacionais/University of Virginia - FEITO/Análises de Dados - Dpto de Psicologia/Cancer/cancer_breast.csv", header = TRUE)
str(cancer)
names(cancer)
ega.cancer <- EGA(cancer[,-c(1,11)])
boot.cancer <- bootEGA(data = cancer[,-c(1,11)], n = 500, medianStructure = TRUE, plot.MedianStructure = TRUE)
strct.cancer <- split(boot.cancer$medianGraph$median.dim.variables[, 1], list(boot.cancer$medianGraph$median.dim.variables[, 2]))
names(strct.cancer) <- paste("Fat", labels(strct.cancer))
model.ega.cancer <- paste(names(strct.cancer), " =~ ", lapply(strct.cancer, function(x) paste(print(x),
collapse = " + ")), collapse = " \n ")
fit.mod.ega.cancer <- cfa(model = model.ega.cancer, estimator = "WLSMV",
orthogonal = FALSE, se = "standard", test = "satorra-bentler",
data = cancer)
library(lavaan)
fit.mod.ega.cancer <- cfa(model = model.ega.cancer, estimator = "WLSMV",
orthogonal = FALSE, se = "standard", test = "satorra-bentler",
data = cancer)
fitmeasures(fit.mod.ega.cancer)
plot.cfa.cancer <- semPaths(fit.mod.ega.cancer, title = FALSE, label.cex = 0.9,
sizeLat = 7, sizeMan = 5, edge.label.cex = 0.9, minimum = 0.1,
sizeInt = 0.5, mar = c(1, 1, 1, 1), residuals = FALSE,
intercepts = FALSE, thresholds = FALSE, layout = "spring",
"std", cut = 0.5)
cancer.scores.boot <- predict(fit.mod.ega.cancer)
scores.cancer.boot <- data.frame(cancer.scores.boot,na.omit(cancer))
str(scores.cancer.boot)
library(caret)
train <- trainControl(method="repeatedcv", number=10, repeats=10)
model <- train(class~Fat1+Fat2, data=scores.cancer, trControl=train, method="rpart")
model <- train(class~Fat1+Fat2, data=scores.cancer.boot, trControl=train, method="rpart")
print(model)
summary(model)
resamples(model)
model$resample
summary(model$resample[,1:2])
model2 <- train(class~., data=scores.cancer.boot[,-c(1:3)], trControl=train, method="rpart")
print(model2)
names(scores.cancer.boost)
names(scores.cancer.boot)
model.all.confusion <- confusionMatrix(predict(model, scores.cancer.boot[,1:2]), scores.cancer.boot$class)
model.all.confusion
set.seed(27)
partition <- createDataPartition(scores.cancer.boot$class, p = 0.7, list = FALSE)
scores.cancer.boot.test  <- scores.cancer.boot[-partition, ]
train <- trainControl(method="repeatedcv", number=10, repeats=10)
model <- train(class~Fat1+Fat2, data=scores.cancer.boot.train, trControl=train, method="rpart")
scores.cancer.boot.train <- scores.cancer.boot[partition, ]
model <- train(class~Fat1+Fat2, data=scores.cancer.boot.train, trControl=train, method="rpart")
print(model)
model$resample
summary(model$resample[,1:2])
model.2fact.confusion <- confusionMatrix(predict(model, scores.cancer.boot.train[,1:2]), scores.cancer.boot.train$class)
model.2fact.confusion
model <- train(class~Fat1+Fat2, data=scores.cancer.boot.train, trControl=train, method="rf")
print(model)
model$resample
summary(model$resample[,1:2])
model.2fact.confusion <- confusionMatrix(predict(model, scores.cancer.boot.train[,1:2]), scores.cancer.boot.train$class)
model.2fact.confusion
model.2fact.confusion <- confusionMatrix(predict(model, scores.cancer.boot.test[,1:2]), scores.cancer.boot.train$class)
scores.cancer.boot.test  <- scores.cancer.boot[-partition, ]
model.2fact.confusion <- confusionMatrix(predict(model, scores.cancer.boot.test[,1:2]), scores.cancer.boot.train$class)
model.2fact.confusion <- confusionMatrix(predict(model, scores.cancer.boot.test[,1:2]), scores.cancer.boot.test$class)
model.2fact.confusion
model$resample
summary(model$resample[,1:2])
print(model)
model.2fact.confusion
model.2fact.confusion <- confusionMatrix(predict(model, scores.cancer.boot.test[,1:2]), scores.cancer.boot.test$class)
model.2fact.confusion
model <- train(class~Fat1+Fat2, data=scores.cancer.boot.train, trControl=train, method="rpart")
print(model)
summary(model$resample[,1:2])
model.2fact.confusion <- confusionMatrix(predict(model, scores.cancer.boot.test[,1:2]), scores.cancer.boot.test$class)
model.2fact.confusion
names(scores.cancer.boot.train)
model2 <- train(class~., data=scores.cancer.boot.train[,-c(1:3)], trControl=train, method="rpart")
print(model2)
model2$resample
model2.all.confusion <- confusionMatrix(predict(model2, scores.cancer.boot.test[,1:2]), scores.cancer.boot.test$class)
model2.all.confusion <- confusionMatrix(predict(model2, scores.cancer.boot.test[,-c(1:3)]), scores.cancer.boot.test$class)
model2.all.confusion
model.2fact.confusion
model.2fact.confusion$overall
model.2fact.confusion$byClass
library(EGA)
library(doParallel)
library(bootnet)
?bootnet
library(rmarkdown)
install.packages("rmarkdown")
version(qgraph)
version("qgraph")
citation("qgraph")
sessionInfo()
library(qgraph)
sessionInfo()
library(semPlot)
library(igraph)
sessionInfo()
library(lavaan)
sessionInfo()
library(roxygen2)
library(testhat)
install.packages("testhat")
install.packages("testthat")
library(devtools)
install.packages("devtools")
install.packages("formatR")
library(formatR)
EGA <- function(data, plot.EGA = TRUE) {
require(qgraph)
require(igraph)
data <- as.data.frame(data)
cor.data <- cor_auto(data)
glasso.ebic <- EBICglasso(S = cor.data, n = nrow(data), lambda.min.ratio = 0.1)
graph.glasso <- as.igraph(qgraph(glasso.ebic, layout = "spring", vsize = 3,DoNotPlot = TRUE))
wc <- walktrap.community(graph.glasso)
n.dim <- max(wc$membership)
if (plot.EGA == TRUE) {
plot.ega <- qgraph(glasso.ebic, layout = "spring", vsize = 5, groups = as.factor(wc$membership))
}
a <- list()
a$n.dim <- n.dim
a$correlation <- cor.data
a$glasso <- glasso.ebic
a$wc <- wc$membership
dim.variables <- data.frame(items = names(data), dimension = a$wc)
dim.variables <- dim.variables[order(dim.variables[,2]),]
a$dim.variables <- dim.variables
class(a) <- c("EGA", "list")
return(a)
}
print.EGA <- function(x, ...)
{
cat("EGA Results:\n")
cat("\nNumber of Dimensions:\n")
print(x$n.dim)
cat("\nItems per Dimension:\n")
print(x$dim.variables)
}
plot.EGA <- function(object,
layout = 'spring',
vsize = 4,
...) {
groups = as.factor(object$wc)
variable = object$glasso
qgraph(variable,
layout = layout,
vsize = vsize,
groups = groups,
...)
}
CFA <- function(ega.obj, estimator, plot.CFA = TRUE, data, layout = "spring", ...){
require(lavaan)
require(semPlot)
strct <- split(ega.obj$dim.variables[,1], list(ega.obj$dim.variables[,2]))
names(strct) <- paste("Fat",labels(strct))
model.ega <- paste(names(strct), " =~ ", lapply(strct, function(x) paste(print(x), collapse = " + ")), collapse = " \n ")
fit.mod.ega <- cfa(model = model.ega, estimator = estimator, orthogonal = FALSE, se = "standard",test = "satorra-bentler", data = data, ...)
summary.cfa <- summary(fit.mod.ega, fit.measures = TRUE)
fit.measures.cfa <- fitMeasures(fit.mod.ega, fit.measures = c("chisq", "df", "pvalue", "cfi", "rmsea", "gfi", "nfi"))
if (plot.CFA == TRUE) {
plot.cfa <- semPaths(fit.mod.ega, title=FALSE, label.cex = 0.5,sizeLat=5,sizeMan=3,edge.label.cex=0.4, minimum = 0.1, sizeInt = 0.5, mar=c(1,1,1,1), residuals = FALSE, intercepts = FALSE, thresholds = FALSE, layout = "spring", "std", cut = 0.5)
}
cfa <- list()
cfa$fit <- fit.mod.ega
cfa$summary <- summary.cfa
cfa$fit.measures <- fit.measures.cfa
return(cfa)
}
bootEGA <- function (data, n, medianStructure = TRUE, plot.MedianStructure = TRUE, ncores) {
if(!require(qgraph)) {
message("installing the 'qgraph' package")
install.packages("qgraph")
}
if(!require(bootnet)) {
message("installing the 'bootnet' package")
install.packages("bootnet")
}
if(!require(igraph)) {
message("installing the 'igraph' package")
install.packages("igraph")
}
boot.ega <- bootnet(data, nBoot = n, default = "EBICglasso",
computeCentrality = FALSE, type = "parametric", nCores = ncores)
bootGraphs <- vector("list", n)
for (i in 1:n) {
bootGraphs[[i]] <- boot.ega$boots[[i]]$graph
colnames(bootGraphs[[i]]) <- colnames(data)
rownames(bootGraphs[[i]]) <- colnames(wmt2[,7:24])
}
boot.igraph <- vector("list", n)
for (l in 1:n) {
boot.igraph[[l]] <- as.igraph(qgraph(bootGraphs[[l]], DoNotPlot = TRUE))
}
boot.wc <- vector("list", n)
for (m in 1:n) {
boot.wc[[m]] <- walktrap.community(boot.igraph[[m]])
}
boot.ndim <- matrix(NA, nrow = n, ncol = 2)
for (m in 1:n) {
boot.ndim[m, 2] <- max(boot.wc[[m]]$membership)
}
colnames(boot.ndim) <- c("Boot.Number", "N.Dim")
boot.ndim[, 1] <- seq_len(n)
if (medianStructure == TRUE) {
median.Structure <- apply(simplify2array(bootGraphs),
1:2, median)
median.igraph <- as.igraph(qgraph(median.Structure, DoNotPlot = TRUE))
median.wc <- walktrap.community(median.igraph)
median.ndim <- max(median.wc$membership)
dim.variables <- data.frame(items = names(data), dimension = median.wc$membership)
}
if (plot.MedianStructure == TRUE) {
plot.median.ega <- qgraph(median.Structure, layout = "spring",
vsize = 5, groups = as.factor(median.wc$membership))
}
Median <- median(boot.ndim[, 2])
sd.boot <- sd(boot.ndim[, 2])
se.boot <- (1.253 * sd.boot)/sqrt(nrow(boot.ndim))
ciMult <- qt(0.95/2 + 0.5, nrow(boot.ndim) - 1)
ci <- se.boot * ciMult
summary.table <- data.frame(n.Boots = n, median.dim = Median,
SD.dim = sd.boot, SE.dim = se.boot, CI.dim = ci, Lower = Median -
ci, Upper = Median + ci)
result <- list()
result$n <- n
result$boot.ndim <- boot.ndim
result$bootGraphs <- bootGraphs
result$summary.table <- summary.table
medianGraph <- list()
medianGraph$graph <- median.Structure
medianGraph$median.dim.variables <- dim.variables[order(dim.variables[,2]), ]
result$medianGraph <- medianGraph
return(result)
}
library(formatR)
formatR::tidy_dir("R")
View(bootEGA)
View(EGA)
library(EGA)
install.packages("Rtools")
library(EGA)
sessionInfo()
install.packages("beepr")
library(beepr)
beepr("fanfarre")
beep("fanfarre")
beep()
beep()
beep()
beep("Mario")
beep("mario")
library(EGA)
?EGA
beep(ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE))
ega.wmt <- EGA(data = wmt2[,7:24], plot.EGA = TRUE)
beep()
ega.intel <- EGA(data = intelligenceBattery[,8:66])
beep()
beep(complete)
beep("complete")
beep("complete")
beep("treasure")
beep("ready")
beep("ready")
beep("shotgun")
beep("wilhelm")
beep("facebook")
beep("sword")
ega.wmt <- beep(1, expr = EGA(data = wmt2[,7:24], plot.EGA = TRUE))
ega.wmt
ega.intel <- EGA(data = intelligenceBattery[,8:66])
beep("sword")
EGA
EGA2 <- function(data, plot.EGA = TRUE) {
if(!require(qgraph)) {
message("installing the 'qgraph' package")
install.packages("qgraph")
}
if(!require(igraph)) {
message("installing the 'igraph' package")
install.packages("igraph")
}
data <- as.data.frame(data)
cor.data <- cor_auto(data)
glasso.ebic <- EBICglasso(S = cor.data, n = nrow(data), lambda.min.ratio = 0.1)
graph.glasso <- as.igraph(qgraph(glasso.ebic, layout = "spring", vsize = 3, DoNotPlot = TRUE))
wc <- walktrap.community(graph.glasso)
n.dim <- max(wc$membership)
if (plot.EGA == TRUE) {
plot.ega <- qgraph(glasso.ebic, layout = "spring", vsize = 5, groups = as.factor(wc$membership))
}
a <- list()
a$n.dim <- n.dim
a$correlation <- cor.data
a$glasso <- glasso.ebic
a$wc <- wc$membership
dim.variables <- data.frame(items = names(data), dimension = a$wc)
dim.variables <- dim.variables[order(dim.variables[, 2]), ]
a$dim.variables <- dim.variables
class(a) <- c("EGA", "list")
beep("mario")
return(a)
}
ega.intel <- EGA2(data = wmt2)
names(wmt2)
ega.intel <- EGA2(data = wmt2[,7:24])
sample(1:10, 1)
sample(1:10, 2)
sample(1:10, 1)
sample(1:10, 1)
beep(6)
beep(7)
beep(5)
beep(5)
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(sample(1:10, 1))
beep(5)
beep(1)
beep(2)
beep(3)
beep(4)
beep(3)
beep(3)
library(EGA)
library(EGA)
